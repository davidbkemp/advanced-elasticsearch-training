# Geo Point:
# - Good for storing lat/lon points
# - Supports polygon and distance searches
# - Supports sort-by-distance
# - Supports various aggregation operations

DELETE /listings

# Declare a geo-point type for the address.
PUT /listings
{
  "mappings": {
    "properties": {
      "address": {
        "type": "object",
        "properties": {
          "fullAddress": {"type": "text"},
          "geocode": {"type": "geo_point"}
        }
      }
    }
  }
}



# Index example docs
PUT /listings/_doc/1
{
  "address": {
    "fullAddress": "511 Church St, Richmond, VIC 3121",
    "geocode": {
      "lat": -37.829,
      "lon": 144.995
    }
  }
}

PUT /listings/_doc/2
{
  "address": {
    "fullAddress": "Kirribilli House, Kiribilli Ave, Kirribilli NSW 2061",
    "geocode": {
      "lat": -33.851,
      "lon": 151.217
    }
  }
}

# Bounding box search
GET /listings/_search
{
  "query": {
    "geo_bounding_box": {
      "address.geocode": {
        "top_left": {
          "lat": -37,
          "lon": 144
        },
        "bottom_right": {
          "lat": -38,
          "lon": 145
        }
      }
    }
  }
}

# Radial/distance search
GET /listings/_search
{
  "query": {
    "geo_distance": {
      "distance": "10km",
      "address.geocode": {
        "lat": -37.8,
        "lon": 145
      }
    }
  }
}

# Sort by distance
GET /listings/_search
{
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "_geo_distance": {
        "address.geocode": {
          "lat": -37.8,
          "lon": 145
        },
        "order": "asc",
        "unit": "km"
      }
    }
  ]
}

# Score by distance
# Scale is the distance at which the score will halve
GET /listings/_search
{
  "query": {
    "function_score": {
      "functions": [
        {
          "gauss": {
            "address.geocode": {
              "origin": {
                "lat": -37.8,
                "lon": 145
              },
              "scale": "1000km"
            }
          }
        }
      ]
    }
  }
}

# NEW to Elasticsearch 7.2
# Score by distance using "distance_feature"
# Potentially more efficient than "function_score"
# unless "track_total_hits" is set to true.
GET /listings/_search
{
  "query": {
    "distance_feature": {
      "field": "address.geocode",
      "pivot": "1000km",
      "origin": [
        145,
        -37.8
      ]
    }
  }
}

# Polygon search.
GET /listings/_search
{
  "query": {
    "geo_polygon": {
      "address.geocode": {
        "points": [
          {
            "lat": -37,
            "lon": 144
          },
          {
            "lat": -37,
            "lon": 145
          },
          {
            "lat": -40,
            "lon": 145
          }
        ]
      }
    }
  }
}

