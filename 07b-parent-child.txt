DELETE /listings

# title and address are "listing" fields
# product, start, and end are "upgrade" fields
# Here, they are all mixed together.
# A join field is used to relate listing docs with upgrade docs.
PUT /listings
{
  "settings": {
    "number_of_shards": 5
  },
  "mappings": {
    "properties": {

      "title": {
        "type": "text"
      },
      "address": {
        "type": "text"
      },

      "product": {
        "type": "keyword"
      },
      "start": {
        "type": "date"
      },
      "end": {
        "type": "date"
      },

      "my_join_field": {
        "type": "join",
        "relations": {
          "listing": "upgrade"
        }
      }
    }
  }
}



# Index example docs
# Note:
# - you need to specify a "routing" query parameter (more later)
# - you need to specify that it is a "listing"
PUT /listings/_doc/1?routing=1
{
  "title": "Sea Views",
  "address": "1 Smith St Melbourne Vic 3000",
  "my_join_field": {
    "name": "listing"
  }
}

# Note:
# - parents and children need the same routing parameter (consider using the parent id)
# - you have to specify the parent id when indexing a child.
PUT /listings/_doc/100?routing=1
{
  "product": "premier",
  "start": "2015-03-07",
  "end": "2015-03-21",
  "my_join_field": {
    "name": "upgrade",
    "parent": "1"
  }
}

PUT /listings/_doc/101?routing=1
{
  "product": "highlight",
  "start": "2015-03-22",
  "end": "2015-04-13",
  "my_join_field": {
    "name": "upgrade",
    "parent": "1"
  }
}


PUT /listings/_doc/2?routing=2
{
  "title": "Renovators Delight",
  "address": "2 Jones St Sydney NSW 2000",
  "my_join_field": {
    "name": "listing"
  }
}

PUT /listings/_doc/200?routing=2
{
  "product": "premier",
  "start": "2015-03-28",
  "end": "2015-04-10",
  "my_join_field": {
    "name": "upgrade",
    "parent": "2"
  }
}

PUT /listings/_doc/201?routing=2
{
  "product": "highlight",
  "start": "2015-04-11",
  "end": "2015-05-19",
  "my_join_field": {
    "name": "upgrade",
    "parent": "2"
  }
}

# You may optionally specify a "routing" parameter at query time
# BEWARE THAT IT WILL INCLUDE LISTINGS WITH DIFFERENT ROUTING PARAMETERS IF
# THE HASHING ALGORITHM PUTS THEM IN THE SAME SHARD.
GET /listings/_search?routing=2


# Use "has_child" query
# Note that you don't get to see the upgrades
GET /listings/_search
{
  "query": {
    "has_child": {
      "type": "upgrade",
      "query": {
        "bool": {
          "filter": [
            {
              "match": {
                "product": "premier"
              }
            },
            {
              "range": {
                "start": {
                  "lte": "2015-04-01"
                }
              }
            },
            {
              "range": {
                "end": {
                  "gte": "2015-04-01"
                }
              }
            }
          ]
        }
      }
    }
  }
}

# Use inner_hits to include upgrades in the results.
GET /listings/_search
{
  "query": {
    "has_child": {
      "type": "upgrade",
      "inner_hits": {},
      "query": {
        "bool": {
          "filter": [
            {
              "match": {
                "product": "premier"
              }
            },
            {
              "range": {
                "start": {
                  "lte": "2015-04-01"
                }
              }
            },
            {
              "range": {
                "end": {
                  "gte": "2015-04-01"
                }
              }
            }
          ]
        }
      }
    }
  }
}

# How about has_parent?
GET /listings/_search
{
  "query": {
    "has_parent": {
      "parent_type": "listing",
      "inner_hits": {},
      "query": {
        "match": {
          "address": "Sydney"
        }
      }
    }
  }
}
